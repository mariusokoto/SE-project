SELECT USER FROM DUAL;


CREATE TABLE users (
    user_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email        VARCHAR2(255) NOT NULL UNIQUE,
    password     VARCHAR2(255) NOT NULL, -- Store hashed passwords
    role         VARCHAR2(50) CHECK (role IN ('admin', 'teacher', 'student')) NOT NULL
);

CREATE TABLE students (
    student_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identifiant unique pour chaque étudiant
    user_id    NUMBER REFERENCES users(user_id) ON DELETE CASCADE,
    first_name VARCHAR2(50) NOT NULL,                              
    last_name VARCHAR2(50) NOT NULL,                               
    date_of_birth DATE NOT NULL,                                   
    current_academic_year NUMBER NOT NULL,                         
    email VARCHAR2(100) UNIQUE NOT NULL,                           
    major VARCHAR2(100),                                          
    enrollment_date DATE NOT NULL,                                 
    password VARCHAR2(100) NOT NULL
);

CREATE TABLE teachers (
    teacher_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Auto-generated unique ID for the teacher
    user_id    NUMBER REFERENCES users(user_id) ON DELETE CASCADE,
    first_name VARCHAR2(50) NOT NULL,                                 
    last_name VARCHAR2(50) NOT NULL,                                  
    date_of_birth DATE NOT NULL,                                      
    email VARCHAR2(100) UNIQUE NOT NULL,                              
    enrollment_date DATE NOT NULL,                                    
    department VARCHAR2(100),                                        
    courses_taught CLOB, 
    password VARCHAR2(100) NOT NULL
);

CREATE TABLE student_courses (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identifiant unique pour chaque inscription
    student_id NUMBER NOT NULL REFERENCES students(student_id) ON DELETE CASCADE, -- Clé étrangère vers students
    course_id NUMBER NOT NULL REFERENCES courses(course_id) ON DELETE CASCADE, -- Clé étrangère vers courses
    enrollment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    UNIQUE (student_id, course_id) 
);



CREATE TABLE courses (
    course_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_name VARCHAR2(100) NOT NULL,
    description CLOB,
    credit_hours NUMBER(2) NOT NULL,
    department VARCHAR2(100),
    teacher_id NUMBER REFERENCES teachers(teacher_id) ON DELETE SET NULL,
    day_of_week VARCHAR2(10) NOT NULL, 
    start_time TIMESTAMP NOT NULL,     
    end_time TIMESTAMP NOT NULL,       
    semester VARCHAR2(20) NOT NULL,
    max_students NUMBER(3),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER trg_update_courses
BEFORE UPDATE ON courses
FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/


CREATE TABLE grades (
    grade_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique ID for each grade
    student_id NUMBER NOT NULL REFERENCES students(student_id) ON DELETE CASCADE, -- Foreign key to students
    course_id NUMBER NOT NULL REFERENCES courses(course_id) ON DELETE CASCADE, -- Foreign key to courses
    teacher_id NUMBER NOT NULL REFERENCES teachers(teacher_id) ON DELETE CASCADE, -- Foreign key to teachers
    grade NUMBER(3, 1), 
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (student_id, course_id, teacher_id)
);



CREATE OR REPLACE TRIGGER trg_update_grades
BEFORE UPDATE ON grades
FOR EACH ROW
BEGIN
    :NEW.assigned_at := CURRENT_TIMESTAMP;
END;
/

ALTER TABLE grades DROP CONSTRAINT SYS_C007774;

ALTER TABLE grades ADD grade_type VARCHAR2(50);

ALTER TABLE grades ADD CONSTRAINT unique_grade UNIQUE (student_id, course_id, teacher_id, grade_type);




CREATE TABLE attendance (
    attendance_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique ID for each record
    student_id NUMBER NOT NULL REFERENCES students(student_id) ON DELETE CASCADE, -- Foreign key to students
    course_id NUMBER NOT NULL REFERENCES courses(course_id) ON DELETE CASCADE, -- Foreign key to courses
    teacher_id NUMBER NOT NULL REFERENCES teachers(teacher_id) ON DELETE CASCADE, -- Foreign key to teachers
    is_present NUMBER(1) CHECK (is_present IN (0, 1)), -- 0 for absent, 1 for present
    marked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    UNIQUE (student_id, course_id, teacher_id) 
);


INSERT INTO users (email, password, role)
VALUES ('admin@school.com', 'hashed_password1', 'admin');

INSERT INTO users (email, password, role)
VALUES ('teacher1@school.com', 'hashed_password2', 'teacher');

INSERT INTO users (email, password, role)
VALUES ('student1@school.com', 'hashed_password3', 'student');



SELECT * FROM USERS;

SELECT * FROM Teachers;

Select * from students;

select * from courses;

select * from student_courses;


Commit;




